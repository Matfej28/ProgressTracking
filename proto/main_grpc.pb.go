// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: main.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProgressTrackingClient is the client API for ProgressTracking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProgressTrackingClient interface {
	Registration(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error)
	LogIn(ctx context.Context, in *LogInRequest, opts ...grpc.CallOption) (*LogInResponse, error)
	GetRecords(ctx context.Context, in *GetRecordsRequest, opts ...grpc.CallOption) (*GetRecordsResponse, error)
	UpdateRecords(ctx context.Context, in *UpdateRecordsRequest, opts ...grpc.CallOption) (*UpdateRecordsResponse, error)
}

type progressTrackingClient struct {
	cc grpc.ClientConnInterface
}

func NewProgressTrackingClient(cc grpc.ClientConnInterface) ProgressTrackingClient {
	return &progressTrackingClient{cc}
}

func (c *progressTrackingClient) Registration(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	out := new(RegistrationResponse)
	err := c.cc.Invoke(ctx, "/progressTracking.ProgressTracking/Registration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *progressTrackingClient) LogIn(ctx context.Context, in *LogInRequest, opts ...grpc.CallOption) (*LogInResponse, error) {
	out := new(LogInResponse)
	err := c.cc.Invoke(ctx, "/progressTracking.ProgressTracking/LogIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *progressTrackingClient) GetRecords(ctx context.Context, in *GetRecordsRequest, opts ...grpc.CallOption) (*GetRecordsResponse, error) {
	out := new(GetRecordsResponse)
	err := c.cc.Invoke(ctx, "/progressTracking.ProgressTracking/GetRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *progressTrackingClient) UpdateRecords(ctx context.Context, in *UpdateRecordsRequest, opts ...grpc.CallOption) (*UpdateRecordsResponse, error) {
	out := new(UpdateRecordsResponse)
	err := c.cc.Invoke(ctx, "/progressTracking.ProgressTracking/UpdateRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProgressTrackingServer is the server API for ProgressTracking service.
// All implementations must embed UnimplementedProgressTrackingServer
// for forward compatibility
type ProgressTrackingServer interface {
	Registration(context.Context, *RegistrationRequest) (*RegistrationResponse, error)
	LogIn(context.Context, *LogInRequest) (*LogInResponse, error)
	GetRecords(context.Context, *GetRecordsRequest) (*GetRecordsResponse, error)
	UpdateRecords(context.Context, *UpdateRecordsRequest) (*UpdateRecordsResponse, error)
	mustEmbedUnimplementedProgressTrackingServer()
}

// UnimplementedProgressTrackingServer must be embedded to have forward compatible implementations.
type UnimplementedProgressTrackingServer struct {
}

func (UnimplementedProgressTrackingServer) Registration(context.Context, *RegistrationRequest) (*RegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registration not implemented")
}
func (UnimplementedProgressTrackingServer) LogIn(context.Context, *LogInRequest) (*LogInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogIn not implemented")
}
func (UnimplementedProgressTrackingServer) GetRecords(context.Context, *GetRecordsRequest) (*GetRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecords not implemented")
}
func (UnimplementedProgressTrackingServer) UpdateRecords(context.Context, *UpdateRecordsRequest) (*UpdateRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecords not implemented")
}
func (UnimplementedProgressTrackingServer) mustEmbedUnimplementedProgressTrackingServer() {}

// UnsafeProgressTrackingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProgressTrackingServer will
// result in compilation errors.
type UnsafeProgressTrackingServer interface {
	mustEmbedUnimplementedProgressTrackingServer()
}

func RegisterProgressTrackingServer(s grpc.ServiceRegistrar, srv ProgressTrackingServer) {
	s.RegisterService(&ProgressTracking_ServiceDesc, srv)
}

func _ProgressTracking_Registration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgressTrackingServer).Registration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/progressTracking.ProgressTracking/Registration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgressTrackingServer).Registration(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgressTracking_LogIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgressTrackingServer).LogIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/progressTracking.ProgressTracking/LogIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgressTrackingServer).LogIn(ctx, req.(*LogInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgressTracking_GetRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgressTrackingServer).GetRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/progressTracking.ProgressTracking/GetRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgressTrackingServer).GetRecords(ctx, req.(*GetRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgressTracking_UpdateRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgressTrackingServer).UpdateRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/progressTracking.ProgressTracking/UpdateRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgressTrackingServer).UpdateRecords(ctx, req.(*UpdateRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProgressTracking_ServiceDesc is the grpc.ServiceDesc for ProgressTracking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProgressTracking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "progressTracking.ProgressTracking",
	HandlerType: (*ProgressTrackingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Registration",
			Handler:    _ProgressTracking_Registration_Handler,
		},
		{
			MethodName: "LogIn",
			Handler:    _ProgressTracking_LogIn_Handler,
		},
		{
			MethodName: "GetRecords",
			Handler:    _ProgressTracking_GetRecords_Handler,
		},
		{
			MethodName: "UpdateRecords",
			Handler:    _ProgressTracking_UpdateRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}
